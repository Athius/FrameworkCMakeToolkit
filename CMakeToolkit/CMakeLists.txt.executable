cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/CMake" FORCE)

# Find some library
# find_package(a_library)

include(Project)

# Set the name of your project and you want the parent name as prefix
set_project_with_parent_name_prefix(myproject CXX)

# If your project need some external libraries 
#
# set(ADDITIONAL_LIBRARIES a_library)
# set(ADDITIONAL_INCLUDE_DIRS ${a_library_INCLUDE_DIRS})
# set(ADDITIONAL_LIBRARY_DIRS ${a_library_LIBRARY_DIRS})

# Add the target to build your application
try_build_application()

# You want to have the possibility to install your project
#
install(TARGETS ${PROJECT_OUTPUT_NAME}
        DESTINATION a_folder
        COMPONENT a_component)

# You want to add the component 'a_component' inside a package
set(COMPONENT_NAMES a_component)  

include(Package)

# Add the targets to create your binary application package and your source application package
try_build_package()

include(Documentation)

# Add the targets to create your documentation (html, latex and pdf if you have Doxygen, Latex and pdflatex)
try_build_documentation()

include(Profile)

# Add the target to generate some profiling test (GProf required)
try_build_profile()

include(Test)

# Set the name for a cxxtest
set(TEST_NAME ${PROJECT_OUTPUT_NAME}_test)

# Set all the include directories needed to build the test
set(TEST_INPUT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/test/include ${APPLICATION_INCLUDE_DIRS})

# Set the ouput cpp file generated by cxxtest
set(TEST_OUTPUT_CPP_FILE Test.cpp)

# Search all the files used to build the test
file(GLOB_RECURSE TEST_INPUT_FILES
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.h
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.hxx
     ${PROJECT_SOURCE_DIRS}/Test.cpp)
      
# Set the library directories
set(TEST_LIBRARY_INCLUDE_DIRS  ${a_library_INCLUDE_DIRS})

# Set external libraries
set(TEST_LIBRARIES ${ADDITIONAL_LIBRARIES})

# Add the target '${PROJECT_OUTPUT_NAME}_test' to build and run the test
try_build_test("${TEST_NAME}" "${TEST_INPUT_INCLUDE_DIRS}" "${TEST_OUTPUT_CPP_FILE}" "${TEST_INPUT_FILES}" "${TEST_LIBRARY_INCLUDE_DIRS}" "${TEST_LIBRARIES}")

