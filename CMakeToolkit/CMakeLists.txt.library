cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/CMake" FORCE)

include(Project)

project(myLibrary CXX)

# Definne some variables to be used by other applications
set(MYLIBRARY_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include CACHE DOC "Include dir for myLibrary")
set(MYLIBRARY_SOURCE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src CACHE DOC "Source dir for myLibrary")
set(MYLIBRARY_LIBRARY_DIRS ${PROJECT_LIBRARY_OUTPUT_DIRECTORY} CACHE DOC "Library include dir for myLibrary")

# Add the target to build the library
try_build_library()

# You want the possibility to install your library
# Add the library to the install target
install(TARGETS ${PROJECT_OUTPUT_NAME}
        LIBRARY
        ARCHIVE DESTINATION "lib"
        COMPONENT libraries)

# Add the headers to the target
install(FILES ${header_files}
        DESTINATION "include"
        COMPONENT library_headers)

# You want to add the files contain in the components 'libraries' and 'library_headers'
set(COMPONENT_NAMES libraries library_headers)

include(Package)

# Set a version to your library
set_project_name_version(2 1 2)

# Add the targets to create your binary application package and your source application package
try_build_package()

# Add some group to your installer (Used for DMG files and NSIS)
cpack_add_component_group(lib_group
                          DISPLAY_NAME "Required Libraries")

# Add the component 'libs' to the group 'lib_group'
cpack_add_component(libs
                    DISPLAY_NAME "myLibrary"
                    GROUP lib_group
                    REQUIRED)

# Add the component 'library_headers' to the group 'lib_group'
cpack_add_component(library_headers
                    DISPLAY_NAME "Headers"
                    GROUP lib_group
                    REQUIRED)

include(Documentation)

# Add the targets to create your documentation (html, latex and pdf if you have Doxygen, Latex and pdflatex)
try_build_documentation()

include(Profile)

# Add the target to generate some profiling test (GProf required)
try_build_profile()

include(Test)
# Set the name for a cxxtest
set(TEST_NAME ${PROJECT_OUTPUT_NAME}_test)

# Set all the include directories needed to build the test
set(TEST_INPUT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/test/include ${APPLICATION_INCLUDE_DIRS})

# Set the ouput cpp file generated by cxxtest
set(TEST_OUTPUT_CPP_FILE Test.cpp)

# Search all the files used to build the test
file(GLOB_RECURSE TEST_INPUT_FILES
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.h
     ${CMAKE_CURRENT_SOURCE_DIR}/test/include/*.hxx
     ${PROJECT_SOURCE_DIRS}/Test.cpp)
      
# Set the library directories
set(TEST_LIBRARY_INCLUDE_DIRS  ${a_library_INCLUDE_DIRS})

# Set external libraries
set(TEST_LIBRARIES ${ADDITIONAL_LIBRARIES})

# Add the target '${PROJECT_OUTPUT_NAME}_test' to build and run the test
try_build_test("${TEST_NAME}" "${TEST_INPUT_INCLUDE_DIRS}" "${TEST_OUTPUT_CPP_FILE}" "${TEST_INPUT_FILES}" "${TEST_LIBRARY_INCLUDE_DIRS}" "${TEST_LIBRARIES}")

# You can add other tests if you want.